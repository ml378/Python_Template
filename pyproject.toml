[project]
name = "python-template"
version = "0.1.0"
description = "Python project template with linting, type checking, and testing."
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "pytest",
    "pytest-cov",
    "mypy",
    "ruff"
]

[tool.mypy]
strict = True  
warn_return_any = True
warn_unused_configs = True
warn_unreachable = True
disallow_untyped_defs = True
disallow_any_generics = True
disallow_untyped_calls = True
disallow_incomplete_defs = True
disallow_subclassing_any = True
check_untyped_defs = True
no_implicit_optional = True
no_implicit_reexport = True
disable_error_code = no-untyped-def, no-untyped-call, union-attr

[tool.pytest.ini_options]
addopts = "--cov=src --cov-report=html"
testpaths = ["tests"]

# Add coverage.py configuration
[tool.coverage.run]
branch = true  # Measure branch coverage
source = ["src"]  # Specify source directory for coverage measurement
omit = ["tests/*", "*/migrations/*"]  # Exclude test and migration files

[tool.coverage.report]
fail_under = 30  # Set minimum coverage threshold (adjust as needed)
show_missing = true  # Show missing lines in the report
skip_covered = true  # Skip files where everything is covered
exclude_lines = [
    "pragma: no cover",
    "if __name__ == '__main__':",
    "def __repr__"
]

[tool.coverage.html]
directory = "coverage_html_report"  # HTML report output directory

[tool.coverage.xml]
output = "coverage.xml"  # Generate XML report for CI/CD

[tool.ruff]
# Enable all available linting rules
lint.select = ["ALL"]
lint.ignore = [
    "E501",   # Ignore line length
    "D203",   # Conflicts with D211 
    "D213",   # Conflicts with D212
    "PLR0913", # Too many arguments in function, sometimes needed for clarity
    "FBT001", # Not useful in many cases
    "FBT002",  # Not useful in many cases
    "D100",  # Ignore missing docstring in modules
    "D101",  # Ignore missing docstring in classes
    "D102",  # Ignore missing docstring in methods
    "D103",  # Ignore missing docstring in functions
    "D104",  # Ignore missing docstring in __init__.py
    "D107",  # Ignore missing docstring in __init__ method
    "ANN001", # Ignore missing type annotation for functions
    "ANN201", # Ignore missing return type annotation for functions
    "ANN204", # Ignore missing return type annotation for __init__
    "PT009",  # Ignore assertEqual/unittest-style assertions
    "PLR2004", # Ignore magic number rule
    "S101"  # Ignore pytest assert rule
]

# Ruff Formatting Rules
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"
